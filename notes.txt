27/05/2020 (Quarta)

1)
Gabriel não incluiu os arquivos usados nos experimentos. Não é um impeditivo, mas vou ter que refazer partes do trabalho que ele já fez e testou. Facilitaria minha vida, principalmente pq tem a parte do teste com redes IP que quase não vai ser alterado a nível de experimento.

Montei um framework para envio/recebimento de pacotes por interesse. Falta definir como seriam gerados os interesses (ex. um pool de interesses acessado aleatoriamente, um pool com número igual de usos entre as opções, ... ver na dissertação)

2)
A parte da comunicação feita pelo Ryu é mais tranquila, o envio de pacotes ta mais bem definido nas modifiações do Gabriel. O que me preocupa é a parte do oftSwitch, olhando no código achei arquivos que lidam com leitura de payload dos pacotes recebidos. Faltaria testar pra validar mas, para fins de simulação, parece possível.

3) - tirado
A ideia seria "monitorar" a criação de flows no controlador e esperar até que todas as flows entre todos os pares de hosts fossem criadas? Sendo assim, tranquilo.

4)
A parte de controle de cache fica dentro do NFD com o nome de ContentStore. Ainda não variei os parâmetros de cache pra validar, mas sei quais são as funções/classes que lidam com isso. Novamente, facilitaria minha vida se o Gabriel me enviasse os códigos que ele usou para setar parâmetros de cache nos hosts a nível de experimento para que eu não tenha que refazer o trabalho dele.

5)
Entre oftSwitch <--> Ryu Ethernet, não sei qual versão mas acho que não importa
Entre hosts <--> hosts Ethernet também, feito pelo minindn que importa funções do tipo do Mininet.


15/06/2020 (Segunda)

- Simulações com 100K, 200K, ...1KK requisições(interesses)
  - Variar cache
  - Variar TTL dos dados
  - Dados criptografados
  - Perdas nos enlaces

- Alterar os cabeçalhos dos pacotes (vai fazer alguma diferença??)
  Tamanho do cabeçalho e, principalmente, do payload.

- Sobre como fazer as simulações
  - Ter um pool de interesses e pacotes (como eu implementei até agora). Cada vez pegar um pacote aleatório e, se já foi criado, sem problema, mas se ainda não foi criado, sortear um outro nodo para ser o produtor desse pacote.

- Tamanho dos pacotes

- Quantos nodos vão ser simulados

como trocar payload dos pacotes ethernet no miniNDN


simulações

- sensor só produz
- periodicidade dos dados de controle de 1 min (=60 rodadas) TTL específico 60 segundos
- tempo de missão: 1h
- cada drone: 6 arquivos de vídeo (1 a cada 10 minutos) TTL=10min
- cada humano: relatorios apenas (2 a cada 1h de missão) TTL=5min
- cada sensor: 10 por missão TTL 2min

caches

- UAV: 8GB -> 32GB (tipo cartão de memória)
- Humano: 8GB -> 32GB (tipo carão de memória)
- Veículo: 5TB -> 10TB

1 cache = 8000 bytes = 7KB
Drone   8GB -> 32GB 
Humano  8GB -> 32GB
Sensor  4GB -> 8GB
Veículo 500 -> 10TB

cabeçalho

- Variando o cabeçalho e a taxa de perda nos enlaces, vale mais a pena procurar pelos valores do WIFI IMAX (ou algo parecido), que é o protocolo usado no militar

Runião 26/06/2020

o que eu fiz
  - producer
  - consumer
  - experiment

o que ficou na minha cabeça
  - tempos de ttl considerando inexistencia de um tempo virtual no MiniNDN
  - taxas do imax (perda e payload)

- diferenciar perdas de enlace e por TTL
  fazer alguma simulação pequena pra ter um feeling dos tempos
    - ex instanciar varios pacotes do mesmo tipo (mesmo TTL) em um experimento simples e ver quanto expiram.


### New environment:

1. After minindn build is successful, head into `mini-ndn/ndn-src/ndn-cxx` and run `./waf configure --with-examples`, which will set examples in the `mini-ndn/ndn-src/ndn-cxx/examples` folder to be compiled when `./waf` is run.

2. Adjust paths in the `build.sh` and `agents-minindn/move-agents.sh` scripts. **NOTE:** the `data-types/` folder is deprecated so nevermind it.

3. As of before MiniNDN 0.5.0, the minindn symbolic link does not exist, so the best way to run experiments is to create an entire python script which will initialize NDN, NFD, NLSR and the experiment itself, so the `move-experiments.sh` script in the experiments directory is also deprecated.

4. After compiling the `ndn-cxx/examples` experiments folder, create symbolic links to the generated consumer and producer files located in `mini-ndn/ndn-src/ndn-cxx/build/exmaples`

5. When running xterms inside MiniNDN, run `export HOME=/tmp/minindn/<hostname>; cd` for each host. Whithout this an error for `no such file or directory will show up`


Reunião 03/12

- Descobrir como funciona o MiniNDN com SDN, especialmente ao que se deve a switches, para atualizar a figura 7. A figura 7 apresenta aquelas gambiarras do nomes/faces/oftsoftswitch.
- Gerar topologia aleatória e mudar aos poucos com alguns parâmetros mais realistas talvez.
- Colocar taxa de perda nos enlaces

10/04/2021

Documentação do NFD: https://users.cs.fiu.edu/~afanasyev/assets/papers/tr-afanasyev2018nfd-dev-guide.pdf 

[forwarding.l2_learning ] Same port for packet from 02:00:00:00:03:00 -> 02:00:00:00:00:00 on 00-00-00-00-00-02|4096.3.  Drop.


11/04/2021

Gráficos
delay = end to end delay
- delay X number of nodes
- delay X percentage of cache available
- data traffic (GB?) X number of nodes
- delay X data flows