general
{
    network /ndn/
    site /d8-site
    router /%C1.Router/cs/d8
    lsa-refresh-time 1800
    lsa-interest-lifetime 4
    sync-protocol psync
    sync-interest-lifetime 60000
    state-dir /tmp/minindn/d8/log
}
neighbors
{
    hello-retries 3
    hello-timeout 1
    hello-interval 60
    adj-lsa-build-interval 10
    face-dataset-fetch-tries 3
    face-dataset-fetch-interval 3600
    neighbor
    {
        name /ndn/d0-site/%C1.Router/cs/d0
        face-uri udp://10.0.0.1
        link-cost 10
    }
    neighbor
    {
        name /ndn/d2-site/%C1.Router/cs/d2
        face-uri udp://10.0.0.33
        link-cost 10
    }
    neighbor
    {
        name /ndn/d12-site/%C1.Router/cs/d12
        face-uri udp://10.0.0.122
        link-cost 10
    }
}
hyperbolic
{
    state off
    radius 99.201814
    angle 0.921247
}
fib
{
    max-faces-per-prefix 3
    routing-calc-interval 15
}
advertising
{
    prefix /ndn/d8-site/d8
}
security
{
    validator
    {
        rule
        {
            id "NLSR Hello Rule"
            for data
            filter
            {
                type name
                regex ^[^<nlsr><INFO>]*<nlsr><INFO><><>$
            }
            checker
            {
                type customized
                sig-type rsa-sha256
                key-locator
                {
                    type name
                    hyper-relation
                    {
                        k-regex ^([^<KEY><nlsr>]*)<nlsr><KEY><>$
                        k-expand \\1
                        h-relation equal
                        p-regex ^([^<nlsr><INFO>]*)<nlsr><INFO><><>$
                        p-expand \\1
                    }
                }
            }
        }
        rule
        {
            id "NLSR LSA Rule"
            for data
            filter
            {
                type name
                regex ^[^<nlsr><LSA>]*<nlsr><LSA>
            }
            checker
            {
                type customized
                sig-type rsa-sha256
                key-locator
                {
                    type name
                    hyper-relation
                    {
                        k-regex ^([^<KEY><nlsr>]*)<nlsr><KEY><>$
                        k-expand \\1
                        h-relation equal
                        p-regex ^<localhop>([^<nlsr><LSA>]*)<nlsr><LSA>(<>*)<><><><>$
                        p-expand \\1\\2
                    }
                }
            }
        }
        rule
        {
            id "NLSR Hierarchy Exception Rule"
            for data
            filter
            {
                type name
                regex ^[^<KEY><%C1.Router>]*<%C1.Router>[^<KEY><nlsr>]*<KEY><><><>$
            }
            checker
            {
                type customized
                sig-type rsa-sha256
                key-locator
                {
                    type name
                    hyper-relation
                    {
                        k-regex ^([^<KEY><%C1.Operator>]*)<%C1.Operator>[^<KEY>]*<KEY><>$
                        k-expand \\1
                        h-relation equal
                        p-regex ^([^<KEY><%C1.Router>]*)<%C1.Router>[^<KEY>]*<KEY><><><>$
                        p-expand \\1
                    }
                }
            }
        }
        rule
        {
            id "NLSR Hierarchical Rule"
            for data
            filter
            {
                type name
                regex ^[^<KEY>]*<KEY><><><>$
            }
            checker
            {
                type hierarchical
                sig-type rsa-sha256
            }
        }
        trust-anchor
        {
            type any
        }
    }
    prefix-update-validator
    {
        rule
        {
            id "NLSR ControlCommand Rule"
            for interest
            filter
            {
                type name
                regex ^<localhost><nlsr><prefix-update>[<advertise><withdraw>]<><><>$
            }
            checker
            {
                type customized
                sig-type rsa-sha256
                key-locator
                {
                    type name
                    regex ^([^<KEY><%C1.Operator>]*)<%C1.Operator>[^<KEY>]*<KEY><>$
                }
            }
        }
        rule
        {
            id "NLSR Hierarchy Rule"
            for data
            filter
            {
                type name
                regex ^[^<KEY>]*<KEY><><><>$
            }
            checker
            {
                type hierarchical
                sig-type rsa-sha256
            }
        }
        trust-anchor
        {
            type any
        }
    }
}
